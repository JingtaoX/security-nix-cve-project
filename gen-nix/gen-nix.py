from string import Template
from pathlib import Path

# Given the revision of nixpkgs, generate the url:
# rev: nixpkgs revision
def gen_nix_url(rev: str) -> str:
    return f"github:NixOS/nixpkgs/{rev}"

# For the basic template..
# There are ad-hoc commands if all you want is just 1 application
# but it's more scalabe if we also want to run other tools and such as well..?

# Basically - the inputs to this are just:
# url: the URL of nixpkgs contains the specific version of that pkg
# pkg: the package in question
# outdir: what directory to generate the package
def print_basic_template(url: str, pkg: str, outdir: str):
        with open("./templates/basic.nix") as f:
            s = f.read()
            template = Template(s)
            # TODO the url depends on 
            out = (template.substitute(url=f'"{url}"', pkg=pkg))
            print(f"Generating the nix file to: {outdir}")
            outpath = Path(outdir)
            if outpath.exists():
                print(f"{outdir} exists. Please remove it and try again")
                # TODO should exit here but it shouldn't matter too much
            outpath.mkdir(exist_ok=True)
            file = outpath / 'flake.nix'
            file.open('w').write(out)

            print(f"""Now run:
cd {outdir}; nix develop

To get your development environment!
            """)
            # with open(file, ) as f1: 

if __name__ == "__main__":
    # Example:
    # curl 8.0.1 needs nixpkgs at revision: 8cad3dbe48029cb9def5cdb2409a6c80d3acfe2e

    # Example url for curl version 8.0.1
    nix_url = gen_nix_url("8cad3dbe48029cb9def5cdb2409a6c80d3acfe2e") 
    print_basic_template(nix_url, "curl", "../../out")
